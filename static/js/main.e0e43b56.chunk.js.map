{"version":3,"sources":["Component/Notification/Notification.js","Component/Statistics/Statistics.js","Component/FeedbackOptions/FeedbackOptions.js","Component/Section/Section.js","App.js","index.js"],"names":["Notification","message","Statistics","good","neutral","bad","total","positivePercentage","FeedbackButton","feedback","onLeaveFeedback","className","type","data-feedback","onClick","FeedbackOptions","options","map","option","toString","Section","title","children","propType","PropTypes","string","isRequired","App","state","handleFeedback","target","dataset","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAUeA,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KCyBEC,EA1BI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qCACGD,EAAQ,GACP,gCACE,4CACA,uCAAUH,KACV,0CAAaC,EAAb,OACA,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,YAGO,IAAVD,GAAe,cAAC,EAAD,CAAcL,QAAQ,0BCbtCO,G,MAAiB,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,gBAClC,OAEE,aADA,CACA,UACEC,UAAU,SACVC,KAAK,SACLC,gBAAeJ,EACfK,QAASJ,EAJX,SAMGD,MAoBQM,EAfS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASN,EAAsB,EAAtBA,gBAClC,OAAOM,EAAQC,KAAI,SAAAC,GAAM,OACvB,cAAC,EAAD,CAEET,SAAUS,EACVR,gBAAiBA,GAFZQ,EAAOC,gB,gBCfZC,G,MAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,sBAAKX,UAAU,UAAf,UACE,6BAAKU,IACJC,OAKPF,EAAQG,SAAW,CACjBF,MAAOG,IAAUC,OAAOC,YAGXN,QCiCAO,E,4MA5CbC,MAAQ,CACNzB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAEPwB,eAAiB,YAAiB,IACxBpB,EADuB,EAAbqB,OACUC,QAApBtB,SACR,EAAKuB,UAAS,SAAAC,GAAS,sBAAQxB,EAAWwB,EAAUxB,GAAY,O,EAGlEyB,mBAAqB,WAAO,IAAD,EACM,EAAKN,MACpC,OAFyB,EACjBzB,KADiB,EACXC,QADW,EACFC,K,EAGzB8B,gCAAkC,WAAO,IAC/BhC,EAAS,EAAKyB,MAAdzB,KACFG,EAAQ,EAAK4B,qBACnB,OAAO5B,EAAQ8B,KAAKC,MAAOlC,EAAOG,EAAS,KAAO,G,4CAGpD,WACE,IADO,EAEwBgC,KAAKV,MAA5BzB,EAFD,EAECA,KAAMC,EAFP,EAEOA,QAASC,EAFhB,EAEgBA,IACjBC,EAAQgC,KAAKJ,qBACb3B,EAAqB+B,KAAKH,kCAEhC,OACE,eAAC,EAAD,CAASd,MAAO,wBAAhB,UACE,cAAC,EAAD,CACEL,QARU,CAAC,OAAQ,UAAW,OAS9BN,gBAAiB4B,KAAKT,iBAExB,cAAC,EAAD,CACE1B,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,W,GAtCZgC,aCClBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e0e43b56.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import PropTypes from 'prop-types';\nimport Notification from '../Notification';\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <>\n      {total > 0 && (\n        <div>\n          <h2>Statistics</h2>\n          <p>Good: {good}</p>\n          <p>Neutral: {neutral} </p>\n          <p>Bad: {bad}</p>\n          <p>Total: {total}</p>\n          <p>Positive feedback: {positivePercentage} % </p>\n        </div>\n      )}\n      {total === 0 && <Notification message=\"No feedback given\" />}\n    </>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number,\n};\n\nexport default Statistics;\n","import PropTypes from 'prop-types';\nimport './FeedbackOptions.css';\nconst FeedbackButton = ({ feedback, onLeaveFeedback }) => {\n  return (\n    // <h1>Please leave feedback</h1>\n    <button\n      className=\"Button\"\n      type=\"button\"\n      data-feedback={feedback}\n      onClick={onLeaveFeedback}\n    >\n      {feedback}\n    </button>\n  );\n};\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return options.map(option => (\n    <FeedbackButton\n      key={option.toString()}\n      feedback={option}\n      onLeaveFeedback={onLeaveFeedback}\n    />\n  ));\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string),\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from 'prop-types';\n\nimport './Section.css';\n\nconst Section = ({ title, children }) => {\n  return (\n    <div className=\"Section\">\n      <h2>{title}</h2>\n      {children}\n    </div>\n  );\n};\n\nSection.propType = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Section;\n","import React, { Component } from 'react';\nimport Statictics from './Component/Statistics';\nimport FeedbackOptions from './Component/FeedbackOptions';\nimport Section from './Component/Section';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n  handleFeedback = ({ target }) => {\n    const { feedback } = target.dataset;\n    this.setState(prevState => ({ [feedback]: prevState[feedback] + 1 }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    const total = this.countTotalFeedback();\n    return total ? Math.round((good / total) * 100) : 0;\n  };\n\n  render() {\n    const options = ['good', 'neutral', 'bad'];\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback();\n    const positivePercentage = this.countPositiveFeedbackPercentage();\n\n    return (\n      <Section title={'Please leave feedback'}>\n        <FeedbackOptions\n          options={options}\n          onLeaveFeedback={this.handleFeedback}\n        />\n        <Statictics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={total}\n          positivePercentage={positivePercentage}\n        />\n      </Section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}